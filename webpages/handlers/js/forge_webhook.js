// Generated by CoffeeScript 1.7.1
(function() {
  var arrKV, arrParams, fDisplayError, fFailedRequest, fIssueRequest, fOnLoad, fUpdateWebhookList, oParams, param, _i, _len;

  arrParams = window.location.search.substring(1).split('&');

  oParams = {};

  for (_i = 0, _len = arrParams.length; _i < _len; _i++) {
    param = arrParams[_i];
    arrKV = param.split('=');
    oParams[arrKV[0]] = arrKV[1];
  }

  if (oParams.id) {
    oParams.id = decodeURIComponent(oParams.id);
  }

  fDisplayError = function(msg) {
    window.scrollTo(0, 0);
    $('#info').text("Error: " + msg);
    return $('#info').attr('class', 'error');
  };

  fIssueRequest = function(args) {
    $('#info').text('');
    return $.post('/usercommand', args.body).done(args.done).fail(args.fail);
  };

  fFailedRequest = function(msg) {
    return function(err) {
      if (err.status === 401) {
        return window.location.href = 'forge?page=forge_rule';
      } else {
        return fDisplayError(msg);
      }
    };
  };

  fUpdateWebhookList = function(data) {
    var img, inp, modName, oHooks, tr, _results;
    $('#table_webhooks tr').remove();
    oHooks = JSON.parse(data.message);
    console.log(oHooks);
    _results = [];
    for (modName in oHooks) {
      tr = $('<tr>');
      inp = $('<div>').text(modName);
      img = $('<img>').attr('class', 'del').attr('title', 'Delete Module').attr('src', 'red_cross_small.png');
      tr.append($('<td>').append(img));
      tr.append($('<td>').append(inp));
      _results.push($('#table_webhooks').append(tr));
    }
    return _results;
  };

  fOnLoad = function() {
    document.title = 'Create Webhooks!';
    fIssueRequest({
      body: {
        command: 'get_all_webhooks'
      },
      done: fUpdateWebhookList,
      fail: fFailedRequest('Unable to post get_all_webhooks request')
    });
    return $('#but_submit').click(function() {
      var hookname;
      $('#info').text('');
      hookname = $('#inp_hookname').val();
      if (hookname === '') {
        return fDisplayError('Please provide a hookname!');
      } else {
        $('#display_hookurl *').remove();
        return fIssueRequest({
          body: {
            command: 'create_webhook',
            body: JSON.stringify({
              hookname: hookname
            })
          },
          done: function(data) {
            var div, h3, inp, oAnsw, url;
            oAnsw = JSON.parse(data.message);
            url = [location.protocol, '//', location.host].join('');
            h3 = $('<h3>').text("This is the Webhook Url you should use:");
            inp = $('<input>').attr('type', 'text').attr('style', 'font-size:1em').val("" + url + "/webhooks/" + oAnsw.hookid);
            h3.append(inp);
            $('#display_hookurl').append(h3);
            div = $('<div>').html("Push your location via <a href=\"" + url + "/mobile/index.html?hookid=" + oAnsw.hookid + "\">this page</a>");
            return $('#display_hookurl').append(div);
          },
          fail: function(err) {
            if (err.status === 409) {
              return fFailedRequest('Webhook Event Name already existing!')(err);
            } else {
              return fFailedRequest('Unable to create Webhook! ' + err.message)(err);
            }
          }
        });
      }
    });
  };

  window.addEventListener('load', fOnLoad, true);

}).call(this);
