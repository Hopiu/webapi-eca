// Generated by CoffeeScript 1.6.3
/*

HTTP Listener
=============
> Handles the HTTP requests to the server at the port specified by the
> [config](config.html) file.
*/


(function() {
  var app, config, exports, express, log, onPushEvent, path, qs, sess_sec, userHandler,
    _this = this;

  path = require('path');

  express = require('express');

  app = express();

  qs = require('querystring');

  log = require('./logging');

  config = require('./config');

  userHandler = require('./user_handler');

  sess_sec = '#C[>;j`@".TXm2TA;A2Tg)';

  exports = module.exports = function(args) {
    args = args != null ? args : {};
    log(args);
    config(args);
    userHandler(args);
    sess_sec = config.getSessionSecret() || sess_sec;
    return module.exports;
  };

  exports.addHandlers = function(fEvtHandler, fShutDown) {
    var e, http_port;
    userHandler.addShutdownHandler(fShutDown);
    _this.eventHandler = fEvtHandler;
    app.use(express.cookieParser());
    app.use(express.session({
      secret: sess_sec
    }));
    log.print('HL', 'no session backbone');
    app.use('/', express["static"](path.resolve(__dirname, '..', 'webpages')));
    app.get('/rulesforge', userHandler.handleRequest);
    app.get('/admin', userHandler.handleRequest);
    app.post('/login', userHandler.handleLogin);
    app.post('/push_event', onPushEvent);
    try {
      http_port = config.getHttpPort();
      if (http_port) {
        return app.listen(http_port);
      } else {
        return log.error('HL', new Error('No HTTP port found!? Nothing to listen on!...'));
      }
    } catch (_error) {
      e = _error;
      e.addInfo = 'opening port';
      return log.error(e);
    }
  };

  onPushEvent = function(req, resp) {
    var body;
    body = '';
    req.on('data', function(data) {
      return body += data;
    });
    return req.on('end', function() {
      var obj;
      obj = qs.parse(body);
      if (obj && obj.event && obj.eventid) {
        resp.write('Thank you for the event (' + obj.event + '[' + obj.eventid + '])!');
        _this.eventHandler(obj);
      } else {
        resp.writeHead(400, {
          "Content-Type": "text/plain"
        });
        resp.write('Your event was missing important parameters!');
      }
      return resp.end();
    });
  };

  exports.shutDown = function() {
    log.print('HL', 'Shutting down HTTP listener');
    return process.exit();
  };

}).call(this);
