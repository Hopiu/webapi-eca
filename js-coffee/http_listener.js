// Generated by CoffeeScript 1.6.3
/*

HTTP Listener
=============
> Receives the HTTP requests to the server at the port specified by the
> [config](config.html) file. These requests (bound to a method) are then 
> redirected to the appropriate handler which then takes care of the request.
*/


(function() {
  var app, config, exports, express, log, path, qs, requestHandler;

  log = require('./logging');

  config = require('./config');

  requestHandler = require('./request_handler');

  path = require('path');

  qs = require('querystring');

  express = require('express');

  app = express();

  /*
  Module call
  -----------
  Initializes the HTTP Listener and its child modules Logging,
  Configuration and Request Handler, then tries to fetch the session
  key from the configuration.
  
  @param {Object} args
  */


  exports = module.exports = function(args) {
    args = args != null ? args : {};
    log(args);
    config(args);
    requestHandler(args);
    return module.exports;
  };

  /*
  Adds the shutdown handler to the admin commands.
  
  @param {function} fshutDown
  @public addHandlers( *fShutDown* )
  */


  exports.addHandlers = function(fShutDown) {
    var e, http_port;
    requestHandler.addHandlers(fShutDown);
    app.use(express.cookieParser());
    app.use(express.session({
      secret: config.getSessionSecret()
    }));
    log.print('HL', 'no session backbone');
    app.use('/', express["static"](path.resolve(__dirname, '..', 'webpages', 'public')));
    app.get('/admin', requestHandler.handleAdmin);
    app.get('/forge_modules', requestHandler.handleForgeModules);
    app.get('/forge_rules', requestHandler.handleForgeRules);
    app.get('/invoke_event', requestHandler.handleInvokeEvent);
    app.post('/event', requestHandler.handleEvent);
    app.post('/login', requestHandler.handleLogin);
    app.post('/logout', requestHandler.handleLogout);
    app.post('/usercommand', requestHandler.handleUserCommand);
    try {
      http_port = config.getHttpPort();
      if (http_port) {
        return app.listen(http_port);
      } else {
        return log.error('HL', new Error('No HTTP port found!? Nothing to listen on!...'));
      }
    } catch (_error) {
      e = _error;
      e.addInfo = 'opening port';
      return log.error(e);
    }
  };

  /*
  Shuts down the http listener.
  
  @public shutDown()
  */


  exports.shutDown = function() {
    log.print('HL', 'Shutting down HTTP listener');
    return process.exit();
  };

}).call(this);
